// Generated by CoffeeScript 1.12.6
var cliPath, docpadPath, docpadUtil, equal, expectPath, joe, nodePath, outPath, pathUtil, renderPath, rootPath, safefs, safeps;

pathUtil = require('path');

safefs = require('safefs');

safeps = require('safeps');

equal = require('assert-helpers').equal;

joe = require('joe');

docpadUtil = require('../lib/util');

docpadPath = pathUtil.join(__dirname, '..', '..');

rootPath = pathUtil.join(docpadPath, 'test');

renderPath = pathUtil.join(rootPath, 'render');

outPath = pathUtil.join(rootPath, 'render-out');

expectPath = pathUtil.join(rootPath, 'render-expected');

cliPath = pathUtil.join(docpadPath, 'bin', 'docpad');

nodePath = null;

joe.suite('docpad-render', function(suite, test) {
  suite('files', function(suite, test) {
    var items;
    items = [
      {
        filename: 'markdown-with-extension.md',
        stdout: '*awesome*'
      }, {
        filename: 'markdown-with-extensions.html.md',
        stdout: '<p><em>awesome</em></p>'
      }
    ];
    return items.forEach(function(item) {
      return test(item.filename, function(done) {
        var command, opts;
        command = ['node', cliPath, '--global', '--silent', 'render', pathUtil.join(renderPath, item.filename)];
        opts = {
          cwd: rootPath,
          output: false
        };
        return safeps.spawn(command, opts, function(err, stdout, stderr, status, signal) {
          stdout = (stdout || '').toString().trim();
          if (err) {
            return done(err);
          }
          equal(stdout, item.stdout, 'output');
          return done();
        });
      });
    });
  });
  return suite('stdin', function(suite, test) {
    var items;
    items = [
      {
        testname: 'markdown without extension',
        filename: '',
        stdin: '*awesome*',
        stdout: '*awesome*',
        error: 'Error: filename is required'
      }, {
        testname: 'markdown with extension as filename',
        filename: 'markdown',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }, {
        testname: 'markdown with extension',
        filename: 'example.md',
        stdin: '*awesome*',
        stdout: '*awesome*'
      }, {
        testname: 'markdown with extensions',
        filename: '.html.md',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }, {
        testname: 'markdown with filename',
        filename: 'example.html.md',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }
    ];
    items.forEach(function(item) {
      return test(item.testname, function(done) {
        var command, opts;
        command = ['node', cliPath, '--global', 'render'];
        if (item.filename) {
          command.push(item.filename);
        }
        opts = {
          stdin: item.stdin,
          cwd: rootPath,
          output: false
        };
        return safeps.spawn(command, opts, function(err, stdout, stderr, status, signal) {
          stdout = (stdout || '').toString().trim();
          if (err) {
            return done(err);
          }
          if (item.error && stdout.indexOf(item.error)) {
            return done();
          }
          equal(stdout, item.stdout, 'output');
          return done();
        });
      });
    });
    return test('outPath', function(done) {
      var command, item, opts;
      item = {
        "in": '*awesome*',
        out: '<p><em>awesome</em></p>',
        outPath: pathUtil.join(outPath, 'outpath-render.html')
      };
      command = ['node', cliPath, '--global', 'render', 'markdown', '-o', item.outPath];
      opts = {
        stdin: item["in"],
        cwd: rootPath,
        output: false
      };
      return safeps.spawn(command, opts, function(err, stdout, stderr, status, signal) {
        stdout = (stdout || '').toString().trim();
        if (err) {
          return done(err);
        }
        equal(stdout, '');
        return safefs.readFile(item.outPath, function(err, data) {
          var result;
          if (err) {
            return done(err);
          }
          result = data.toString().trim();
          equal(result, item.out, 'output');
          return done();
        });
      });
    });
  });
});
