// Generated by CoffeeScript 1.12.6
var cliPath, docpad, docpadConfig, docpadPath, docpadUtil, equal, expectPath, joe, pathUtil, renderPath, rootPath;

pathUtil = require('path');

equal = require('assert-helpers').equal;

joe = require('joe');

docpadUtil = require('../lib/util');

docpadPath = pathUtil.join(__dirname, '..', '..');

rootPath = pathUtil.join(docpadPath, 'test');

renderPath = pathUtil.join(rootPath, 'render');

expectPath = pathUtil.join(rootPath, 'render-expected');

cliPath = pathUtil.join(docpadPath, 'bin', 'docpad');

docpadConfig = {
  action: false,
  port: 9780,
  rootPath: rootPath,
  logLevel: docpadUtil.getDefaultLogLevel(),
  skipUnsupportedPlugins: false,
  catchExceptions: false,
  environments: {
    development: {
      a: 'instanceConfig',
      b: 'instanceConfig',
      templateData: {
        a: 'instanceConfig',
        b: 'instanceConfig'
      }
    }
  }
};

process.on('uncaughtException', function(err) {
  throw err;
});

docpad = null;

joe.suite('docpad-api', function(suite, test) {
  suite('create', function(suite, test) {
    test('output configuration', function() {
      return console.log('Creating DocPad with the configuration:\n' + require('../lib/util').inspect(docpadConfig));
    });
    test('create DocPad instance without an action', function(done) {
      return docpad = require('../lib/docpad').create(docpadConfig, done);
    });
    test('load action', function(done) {
      return docpad.action('load', done);
    });
    return test('ready action', function(done) {
      return docpad.action('ready', done);
    });
  });
  suite('models', function(suite, test) {
    return suite('document', function(suite, tet) {
      var document, documentAttributes;
      document = null;
      documentAttributes = {
        meta: {
          relativePath: "some/relative/path.txt"
        }
      };
      test('create', function() {
        document = docpad.createDocument(documentAttributes);
        document.on('log', console.log.bind(console));
        equal(document.getMeta('relativePath'), documentAttributes.meta.relativePath, 'meta relativePath');
        return equal(document.get('relativePath'), documentAttributes.meta.relativePath, 'attr relativePath');
      });
      return test('load', function(complete) {
        return document.load(function(err) {
          if (err) {
            return complete(err);
          }
          equal(document.getMeta('relativePath'), documentAttributes.meta.relativePath, 'relativePath');
          return complete();
        });
      });
    });
  });
  return suite('render', function(suite, test) {
    var inputs;
    inputs = [
      {
        testname: 'markdown without extension',
        filename: 'file',
        stdin: '*awesome*',
        stdout: '*awesome*'
      }, {
        testname: 'markdown with extension as filename',
        filename: 'markdown',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }, {
        testname: 'markdown with extension',
        filename: 'example.md',
        stdin: '*awesome*',
        stdout: '*awesome*'
      }, {
        testname: 'markdown with extensions',
        filename: '.html.md',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }, {
        testname: 'markdown with filename',
        filename: 'example.html.md',
        stdin: '*awesome*',
        stdout: '<p><em>awesome</em></p>'
      }
    ];
    return inputs.forEach(function(input) {
      return test(input.testname, function(done) {
        var opts;
        opts = {
          data: input.stdin,
          filename: input.filename,
          renderSingleExtensions: 'auto'
        };
        return docpad.action('render', opts, function(err, result) {
          if (err) {
            return done(err);
          }
          equal(result.trim(), input.stdout, 'output');
          return done();
        });
      });
    });
  });
});
